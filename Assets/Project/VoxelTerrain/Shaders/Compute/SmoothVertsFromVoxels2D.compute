// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Voxel {
	int x;
	int y;
	int height;
    float3 normalNorth;
    float3 normalSouth;
    float3 normalEast;
    float3 normalWest;
};

// Chunk data
float voxelSize;
uint chunkWidth;

RWStructuredBuffer<Voxel> voxels;

// Mesh data
RWStructuredBuffer<float3> verts;
RWStructuredBuffer<uint> tris;

uint GetVoxId(uint3 id)
{
    return id.x + (id.y * chunkWidth);
}

uint GetVoxId(uint x, uint y)
{
    return x + (y * chunkWidth);
}

uint GetVertId(uint3 id)
{
    return id.x + (id.y * (chunkWidth + 1));
}

uint GetVertId(uint x, uint y)
{
    return x + (y * (chunkWidth + 1));
}

float3 VertFromVoxel(uint voxId)
{
    Voxel voxel = voxels[voxId];
    float x = voxel.x * voxelSize;
    float y = voxel.height;
    float z = voxel.y * voxelSize;
    
    return float3(x, y, z);
}

void SetTris(uint3 id, uint start)
{
    tris[start] = GetVertId(id);
    tris[start + 1] = GetVertId(id.x, id.y + 1);
    tris[start + 2] = GetVertId(id.x + 1, id.y);

    tris[start + 3] = GetVertId(id.x + 1, id.y);
    tris[start + 4] = GetVertId(id.x, id.y + 1);
    tris[start + 5] = GetVertId(id.x + 1, id.y + 1);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint voxId = GetVoxId(id);
    uint vertId = GetVertId(id);
    
    verts[vertId] = VertFromVoxel(voxId);
    if (id.x == chunkWidth - 1 && id.y == chunkWidth - 1)
    {
        uint newVertId = GetVertId(chunkWidth, chunkWidth);
        verts[newVertId] = float3((voxels[voxId].x * voxelSize) + voxelSize, voxels[voxId].height, (voxels[voxId].y * voxelSize) + voxelSize);
    }
    if (id.x == chunkWidth - 1)
    {
        uint newVertId = GetVertId(chunkWidth, id.y);
        verts[newVertId] = float3((voxels[voxId].x * voxelSize) + voxelSize, voxels[voxId].height, voxels[voxId].y * voxelSize);
    }
    if (id.y == chunkWidth - 1)
    {
        uint newVertId = GetVertId(id.x, chunkWidth);
        verts[newVertId] = float3(voxels[voxId].x * voxelSize, voxels[voxId].height, (voxels[voxId].y * voxelSize) + voxelSize);
    }

    uint triStart = voxId * 6;
    
    SetTris(id, triStart);
}